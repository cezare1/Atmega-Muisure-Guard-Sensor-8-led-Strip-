//       +------------------------------------+
//       |              START                 |
//       +------------------------------------+
//                     |
//                     v
//       +------------------------------------+
//       |  Inicjalizacja (setup)             |
//       |  - Uruchom NeoPixel                |
//       |  - Wczytaj kalibrację z EEPROM     |
//       +------------------------------------+
//                     |
//                     v
//       +------------------------------------+
//       |               LOOP                 |
//       +------------------------------------+
//                     |
//                     v
//       +---------------------------------------------+
//       |  Odczytaj stan przycisku (BUTTON_PIN)       |
//       |  Czy przycisk wciśnięty?                    |
//       +---------------------------------------------+
//                |                  |
//                v                  v
//       +-----------------+     +--------------------+
//       | Nie wciśnięty   |     | Wciśnięty          |
//       | (pomijanie)     |     | - Rozpocznij       |
//       |                 |     |   kalibrację       |
//       +-----------------+     +--------------------+
//                |                  |
//                v                  v
//       +---------------------------------------------+
//       |  Czy minęło 1 sekunda od ostatniej aktual?  |
//       +---------------------------------------------+
//                |                  |
//                v                  v
//       +-----------------+     +--------------------+
//       | Nie (czekaj)    |     | Tak                |
//       +-----------------+     +--------------------+
//                                     |
//                                     v
//       +---------------------------------------------+
//       |  Pobierz odczyt czujnika (SENSOR_PIN)       |
//       |  Przelicz wilgotność (%)                    |
//       |  Zapisz w tablicy odczytów                  |
//       +---------------------------------------------+
//                                     |
//                                     v
//       +---------------------------------------------+
//       |  Wylicz średnią wilgotność                  |
//       |  Z odrzuceniem skrajnych wartości           |
//       +---------------------------------------------+
//                                     |
//                                     v
//       +---------------------------------------------+
//       |  Czy wilgotność > wetThreshold?            |
//       |  (np. > 60%)                                |
//       +---------------------------------------------+
//                |                  |
//                v                  v
//       +-----------------+     +--------------------------+
//       | Nie             |     | Tak                      |
//       |                 |     | - Wyświetl efekt         |
//       |                 |     |   "zbyt mokro"           |
//       +-----------------+     +--------------------------+
//                |                  
//                v
//       +---------------------------------------------+
//       | Czy wilgotność < dryThreshold?              |
//       | (np. < 40%)                                 |
//       +---------------------------------------------+
//                |                  |
//                v                  v
//       +-----------------+     +--------------------------+
//       | Nie             |     | Tak                      |
//       |                 |     | - Wyświetl efekt         |
//       |                 |     |   "zbyt sucho"           |
//       +-----------------+     +--------------------------+
//                |
//                v
//       +---------------------------------------------+
//       |  Wilgotność między 40–60%?                  |
//       +---------------------------------------------+
//                |
//                v
//       +---------------------------------------------+
//       |  Wyświetl "optymalny" efekt:                |
//       |  - Włącz piksele proporcjonalnie do %       |
//       |    nawodnienia:                             |
//       |      np. 50% -> 4 piksele świecące          |
//       +---------------------------------------------+
//                |
//                v
//       +------------------------------------+
//       |              LOOP END              |
//       | Powrót do początku pętli           |
//       +------------------------------------+



#include <Adafruit_NeoPixel.h>
#include <EEPROM.h>

// Definicje pinów i parametrów
#define LED_PIN 6
#define NUM_LEDS 8
#define SENSOR_PIN A0
#define BRIGHTNESS 1
#define PULSE_BRIGHTNESS 3
#define BUTTON_PIN 2
#include <EEPROM.h>


// Adresy EEPROM
#define EEPROM_MIN_ADDRESS 0
#define EEPROM_MAX_ADDRESS 2


void calibrateSensor();
void loadCalibrationFromEEPROM();
int calculateStableAverage();
void sortArray(int arr[], int size);
void displayWet();
void displayDry();
void displayOptimal(int moisturePercent);
void rainbowEffect(int delayTime);
byte wheel(byte WheelPos);

// Inicjalizacja diod NeoPixel
Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

// Kalibracja czujnika
int moistureMin = 180; // Zanurzenie w wodzie (100%)
int moistureMax = 475; // Sucha gleba (0%)
bool isCalibrating = false;

// Tolerancje wilgotności
const int wetThreshold = 60;   // % - zbyt mokro
const int dryThreshold = 40;   // % - zbyt sucho

// Zmienne globalne
unsigned long lastUpdateTime = 0;
const unsigned long updateInterval = 1000; // Odświeżanie co sekundę
#define MAX_READINGS 100
int readings[MAX_READINGS]; // Tablica na pomiary
int readingIndex = 0;       // Aktualny indeks w tablicy
int totalReadings = 0;      // Liczba zapisanych pomiarów

void setup() {
  Serial.begin(9600);
  strip.begin();
  strip.setBrightness(10);
  strip.show();

  pinMode(BUTTON_PIN, INPUT_PULLUP); // Przycisk z podciągnięciem
  loadCalibrationFromEEPROM();       // Wczytaj kalibrację z EEPROM
}

void loop() {
  unsigned long currentMillis = millis();



// Detekcja naciśnięcia przycisku (z eliminacją drgań styków)
static unsigned long lastDebounceTime = 0;
static bool lastButtonState = HIGH;
int buttonState = digitalRead(BUTTON_PIN);

if (buttonState == LOW && lastButtonState == HIGH && millis() - lastDebounceTime > 50) {
lastDebounceTime = millis();
calibrateSensor(); // Rozpoczęcie kalibracji
}
lastButtonState = buttonState;








  // Odświeżanie co 1 sekundę
  if (currentMillis - lastUpdateTime >= updateInterval) {
    lastUpdateTime = currentMillis;

    // Pobranie pomiaru i zapisanie do tablicy
    int sensorValue = analogRead(SENSOR_PIN);
    int moisturePercent = map(sensorValue, moistureMin, moistureMax, 100, 0);
    moisturePercent = constrain(moisturePercent, 0, 100);
    readings[readingIndex] = moisturePercent;

    // Zarządzanie tablicą pomiarów
    readingIndex = (readingIndex + 1) % MAX_READINGS;
    if (totalReadings < MAX_READINGS) {
      totalReadings++;
    }

    // Wyliczenie średniej z odrzuceniem 20% najniższych i najwyższych wartości
    int stableAverage = calculateStableAverage();

    Serial.print("Średnia wilgotność (stabilizowana): ");
    Serial.print(stableAverage);
    Serial.println("%");

    // Obsługa diod na podstawie średniej
    if (stableAverage > wetThreshold) {
      displayWet();
    } else if (stableAverage >= dryThreshold) {
      displayOptimal(stableAverage);
    } else {
      displayDry();
    }
  }
}

// Funkcja do kalibracji
void calibrateSensor() {
isCalibrating = true;

// Kalibracja MIN (suchy czujnik)
showColor(strip.Color(255, 0, 0), 1); // 3 jedno-sekundowe mrugnięcia czerwonym kolorem przed kalibracją
for (int i = 0; i < 4; i++) {
showColor(strip.Color(255, 0, 0), 1); // Czerwony przez 1 sekundę
delay(1000);
showColor(0, 1); // Wyłącz LED
delay(1000);
}

int dryValues[10];
for (int i = 0; i < 10; i++) {
dryValues[i] = analogRead(SENSOR_PIN);
delay(500); // Czekaj pół sekundy między odczytami
}

// Obcinanie górnych i dolnych 20% wyników
sortArray(dryValues, 10);
int trimmedValues[6];
for (int i = 2; i < 8; i++) {
trimmedValues[i - 2] = dryValues[i];
}

// Liczenie średniej z pozostałych wyników
int minValue = 0;
for (int i = 0; i < 6; i++) {
minValue += trimmedValues[i];
}
minValue /= 6;

// Zapisz do EEPROM (suchy czujnik)
EEPROM.put(EEPROM_MAX_ADDRESS, minValue);  // Zapisz jako maksymalną wartość, ponieważ chcemy odwrotną kalibrację
Serial.print("Kalibracja MIN (suchy): ");
Serial.println(minValue);

// 5-sekundowe długie świecenie czerwonym kolorem po kalibracji MIN
showColor(strip.Color(255, 0, 0), 5); // Czerwony przez 5 sekund
delay(500); // Krótkie opóźnienie

delay(3000); // Czekaj na umieszczenie czujnika w wodzie

// Kalibracja MAX (mokry czujnik)
showColor(strip.Color(0, 0, 255), 1); // 3 jedno-sekundowe mrugnięcia niebieskim kolorem przed kalibracją
for (int i = 0; i < 4; i++) {
showColor(strip.Color(0, 0, 255), 1); // Niebieski przez 1 sekundę
delay(1000);
showColor(0, 1); // Wyłącz LED
delay(1000);
}

int wetValues[10];
for (int i = 0; i < 10; i++) {
wetValues[i] = analogRead(SENSOR_PIN);
delay(500); // Czekaj pół sekundy między odczytami
}

// Obcinanie górnych i dolnych 20% wyników
sortArray(wetValues, 10);
int trimmedWetValues[6];
for (int i = 2; i < 8; i++) {
trimmedWetValues[i - 2] = wetValues[i];
}

// Liczenie średniej z pozostałych wyników
int maxValue = 0;
for (int i = 0; i < 6; i++) {
maxValue += trimmedWetValues[i];
}
maxValue /= 6;

// Zapisz do EEPROM (mokry czujnik)
EEPROM.put(EEPROM_MIN_ADDRESS, maxValue);  // Zapisz jako minimalną wartość, ponieważ chcemy odwrotną kalibrację
Serial.print("Kalibracja MAX (mokry): ");
Serial.println(maxValue);

// 5-sekundowe długie świecenie niebieskim kolorem po kalibracji MAX
showColor(strip.Color(0, 0, 255), 5); // Niebieski przez 5 sekund
delay(500); // Krótkie opóźnienie

// pingpong potwierdzająca zakończenie kalibracji = min,max, cycles 
pingPongEffect(strip, NUM_LEDS, 50, 250, 5); 

// Załaduj nowe wartości z EEPROM
loadCalibrationFromEEPROM();

isCalibrating = false;
}

// Wczytanie kalibracji z EEPROM
void loadCalibrationFromEEPROM() {
EEPROM.get(EEPROM_MIN_ADDRESS, moistureMin);
EEPROM.get(EEPROM_MAX_ADDRESS, moistureMax);
Serial.print("Załadowano kalibrację z EEPROM: MIN = ");
Serial.print(moistureMin);
Serial.print(", MAX = ");
Serial.println(moistureMax);
}


// Funkcja do obliczania stabilizowanej średniej
int calculateStableAverage() {
  int sortedReadings[MAX_READINGS];
  memcpy(sortedReadings, readings, totalReadings * sizeof(int));
  sortArray(sortedReadings, totalReadings);

  int discard = totalReadings / 5; // Odrzucamy 20% danych z obu końców
  int sum = 0, count = 0;

  for (int i = discard; i < totalReadings - discard; i++) {
    sum += sortedReadings[i];
    count++;
  }
  return count > 0 ? sum / count : 0;
}

// Funkcja do sortowania tablicy
void sortArray(int arr[], int size) {
  for (int i = 0; i < size - 1; i++) {
    for (int j = 0; j < size - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
}

// Funkcja: Zbyt mokro
void displayWet() {
  int blueBrightness = 40;
  for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(NUM_LEDS - 1 - i, strip.Color(0, 0, blueBrightness));
  }
  strip.show();
}

// Funkcja: Optymalne nawodnienie
void displayOptimal(int moisturePercent) {
  int ledsToLight = map(moisturePercent, dryThreshold, wetThreshold, 1, NUM_LEDS);
  int greenBrightness = 30;

  for (int i = 0; i < NUM_LEDS; i++) {
    if (i < ledsToLight) {
      strip.setPixelColor(NUM_LEDS - 1 - i, strip.Color(0, greenBrightness, 0));
    } else {
      strip.setPixelColor(NUM_LEDS - 1 - i, 0);
    }
  }
  strip.show();
}

// Funkcja: Zbyt sucho
void displayDry() {
  static int brightness = 0;
  static bool increasing = true;

  if (increasing) {
    brightness++;
    if (brightness >= PULSE_BRIGHTNESS) {
      increasing = false;
    }
  } else {
    brightness--;
    if (brightness <= 0) {
      increasing = true;
    }
  }
  strip.setPixelColor(NUM_LEDS - 1, strip.Color(brightness * 25, 0, 0));
  strip.show();
}





// Pingpong - na zakonczenie kalibracji - i powrot do programu 
void pingPongEffect(Adafruit_NeoPixel& strip, int numLeds, int minPwm, int maxPwm, int cycles) {
  int direction = 1;   // Kierunek ruchu (1 = w prawo, -1 = w lewo)
  int position = 0;    // Początkowa pozycja diody
  bool redToBlue = true; // Kierunek zmiany koloru (czerwony -> niebieski lub odwrotnie)
  int currentCycle = 0; // Licznik cykli

  int pwmLevels = maxPwm - minPwm + 1; // Liczba poziomów PWM
  float timePerPwm = 1000.0 / pwmLevels; // Czas na jeden poziom PWM w ms

  while (currentCycle < cycles) {
    // Płynne przejście jasności
    for (int pwm = minPwm; pwm <= maxPwm; pwm++) {
      // Kolor w zależności od kierunku
      uint32_t color = redToBlue ? strip.Color(pwm, 0, 0) : strip.Color(0, 0, pwm);
      
      // Zresetowanie wszystkich diod
      strip.clear();

      // Ustawienie koloru aktualnej pozycji
      strip.setPixelColor(position, color);
      strip.show();

      // Opóźnienie dla równomiernego czasu
      delay(timePerPwm);
    }

    // Przesunięcie pozycji w kierunku
    position += direction;

    // Sprawdzenie odbicia od brzegów
    if (position == 0 || position == numLeds - 1) {
      direction = -direction; // Zmiana kierunku
      redToBlue = !redToBlue; // Zmiana koloru
      currentCycle++;         // Zliczenie cyklu
    }
  }

  // Wyłącz wszystkie diody po zakończeniu
  strip.clear();
  strip.show();
}


// Funkcja do migania kolorem
void showColor(uint32_t color, int seconds) {
  for (int i = 0; i < seconds * 2; i++) {
    for (int j = 0; j < NUM_LEDS; j++) {
      strip.setPixelColor(j, (i % 2 == 0) ? color : 0);
    }
    strip.show();
    delay(500);
  }
}

